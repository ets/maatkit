#!/usr/bin/env perl

BEGIN {
   die "The MAATKIT_WORKING_COPY environment variable is not set.  See http://code.google.com/p/maatkit/wiki/Testing"
      unless $ENV{MAATKIT_WORKING_COPY} && -d $ENV{MAATKIT_WORKING_COPY};
   unshift @INC, "$ENV{MAATKIT_WORKING_COPY}/common";
};

use strict;
use warnings FATAL => 'all';
use English qw(-no_match_vars);

use MaatkitTest;
MaatkitTest->import(qw(load_file));

# These modules are not instantiated as objects.
my %not_obj = (
   ServerSpecs    => 1,
   MaatkitCommon  => 1,
   Transformers   => 1,
);

# Many tools dyanmically instantiate objs like $plugin="WatchStatus",
# $plugin->new().  So this script can't detect that.
my %dynamic = (
   'mk-loadavg' => {
      WatchStatus       => 1,
      WatchProcesslist  => 1,
      WatchServer       => 1, 
   },
   'mk-query-advisor' => {
      SlowLogParser     => 1,
      GeneralLogParser  => 1,
   },
   'mk-query-digest' => {
      TcpdumpParser           => 1,
      MySQLProtocolParser     => 1,
      PgLogParser             => 1,
      SlowLogParser           => 1,
      MemcachedProtocolParser => 1,
      MemcachedEvent          => 1,
      BinaryLogParser         => 1,
      GeneralLogParser        => 1,
      ProtocolParser          => 1,
      HTTPProtocolParser      => 1,
   },
   'mk-table-sync' => {
      TableSyncStream   => 1,
      TableSyncChunk    => 1,
      TableSyncNibble   => 1,
      TableSyncGroupBy  => 1,
   },
   'mk-table-usage' => {
      SlowLogParser => 1,
   },
);

# If these base-class modules are present, they should be accompanied
# by a subclass.
my %base_class = (
   'AdvisorRules' => [ qw(QueryAdvisorRules VariableAdvisorRules) ],
);

# Nearly every tool has or needs these modules.
my %ignore = (
   OptionParser => 1,
   DSNParser    => 1,
);

# If you specify one program, it has to be given like ../mk-find/mk-find
my @progs = @ARGV;
if ( !@progs ) {
   @progs = `ls $trunk/mk-*/mk-*`;
}

my $exit_status = 0;

foreach my $prog ( @progs ) {
   my ($base, $program) = $prog =~ m{([a-z-]+)/([a-z-]+)$};
   next unless $program;

   # Arg to load_file is relative to MAATKIT_WORKING_COPY.
   print "$program ";
   my $contents = load_file("$base/$program");

   my %uses   = map  { $_ => 1 } $contents =~ m/new (\w+)/gm;
   my @unused = grep {
      my $module = $_;
      my $unused = 0;
      if ( $not_obj{$module} ) {
         chomp(my $g = `grep -c '${_}::' $prog`);       # MaatkitCommon::_d
         chomp(my $i = `grep -c '${_}->import' $prog`); # Transformers->import
         $g ||= 0;
         $i ||= 0;
         $unused = 1 if $g + $i == 0;
      }
      elsif ( $dynamic{$program}->{$module} ) {
         # Can't detect these.
      }
      elsif ( $base_class{$module} ) {
         $unused = 1 unless grep { $uses{$_} } @{$base_class{$module}};
      }
      else {
         $unused = 1 unless $uses{$module};
      }
      $unused;
   }
   grep { !$ignore{$_} } $contents =~ m/^# (\w+) package \d+/gm;

   if ( @unused ) {
      print "has unused modules:\n"
         . join('', map { "\t$_\n" } @unused);
      $exit_status = 1;
   }
   else {
      print "OK\n"
   }
}

print "No unused modules were detected in any tool.\n"
   if $exit_status == 0;

exit $exit_status;
